// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getLineValue –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function getLineValue(p1, p2, currentX) {
  if (!p1 || !p2 || p1.index === p2.index) return null;
  const slope = (p2.value - p1.value) / (p2.index - p1.index);
  return slope * (currentX - p1.index) + p1.value;
}

// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º `>=` –∏ `<=` –¥–ª—è –±–æ–ª–µ–µ –º—è–≥–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ç–∞–ª–æ–≤
function findFractals(data, type) {
  const fractals = [];
  for (let i = 2; i < data.length - 2; i++) {
    const isHigh = type === 'high' && data[i] >= data[i-1] && data[i] >= data[i-2] && data[i] > data[i+1] && data[i] > data[i+2];
    const isLow = type === 'low' && data[i] <= data[i-1] && data[i] <= data[i-2] && data[i] < data[i+1] && data[i] < data[i+2];
    if (isHigh || isLow) {
      fractals.push({ index: i, value: data[i] });
    }
  }
  return fractals;
}

// average –∏ calculateIndicators –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function average(arr) {
  if (arr.length === 0) return 0;
  return arr.reduce((sum, val) => sum + val, 0) / arr.length;
}

export function calculateIndicators(candles) {
  const closes = candles.map(c => parseFloat(c[4]));
  const highs = candles.map(c => parseFloat(c[2]));
  const lows = candles.map(c => parseFloat(c[3]));

  if (closes.length < 30) {
    return { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö." };
  }

  const ma26 = average(closes.slice(-26));
  const allHighFractals = findFractals(highs, 'high');
  const allLowFractals = findFractals(lows, 'low');
  let resistance = null, support = null;

  if (allHighFractals.length >= 2) {
      resistance = getLineValue(allHighFractals.at(-2), allHighFractals.at(-1), candles.length - 1);
  }
  if (allLowFractals.length >= 2) {
      support = getLineValue(allLowFractals.at(-2), allLowFractals.at(-1), candles.length - 1);
  }

  return {
    ma26, support, resistance,
    lastCandle: { close: closes.at(-1) },
    prevCandle: { close: closes.at(-2) },
  };
}


/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–ª–æ–≥–∏–∫–∞ "–≤ –º–æ–º–µ–Ω—Ç–µ")
 */
export function checkSignals(indicators, lastSignal, candles, currentPrice) {
    const { ma26, support, resistance, prevCandle } = indicators;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    if (!prevCandle || !currentPrice) return null;

    let newSignal = null;

    // --- –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ "–≤ –º–æ–º–µ–Ω—Ç–µ" ---
    
    // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MA26 —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    if (prevCandle.close < ma26 && currentPrice > ma26) {
        newSignal = { type: 'ma_buy', message: `üìà MA –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26 (${ma26.toFixed(4)}) —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö.` };
    } 
    // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MA26 —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    else if (prevCandle.close > ma26 && currentPrice < ma26) {
        newSignal = { type: 'ma_sell', message: `üìâ MA –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26 (${ma26.toFixed(4)}) —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑.` };
    } 
    // –ü—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    else if (resistance && prevCandle.close < resistance && currentPrice > resistance) {
        newSignal = { type: 'trend_buy', message: `üìà –¢—Ä–µ–Ω–¥ –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø—Ä–æ–±–∏–ª–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (${resistance.toFixed(4)}).` };
    } 
    // –ü—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    else if (support && prevCandle.close > support && currentPrice < support) {
        newSignal = { type: 'trend_sell', message: `üìâ –¢—Ä–µ–Ω–¥ –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø—Ä–æ–±–∏–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É (${support.toFixed(4)}).` };
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (newSignal && (!lastSignal || newSignal.type !== lastSignal.type)) {
        return newSignal;
    }

    return null;
}
