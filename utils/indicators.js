// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getLineValue –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function getLineValue(p1, p2, currentX) {
  if (!p1 || !p2 || p1.index === p2.index) return null;
  const slope = (p2.value - p1.value) / (p2.index - p1.index);
  return slope * (currentX - p1.index) + p1.value;
}

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: "–°–º—è–≥—á–∞–µ–º" –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è ---
function findFractals(data, type) {
  const fractals = [];
  for (let i = 2; i < data.length - 2; i++) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º "–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ", —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ñ—Ä–∞–∫—Ç–∞–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const isHigh = type === 'high' &&
      data[i] >= data[i - 1] && data[i] >= data[i - 2] &&
      data[i] >= data[i + 1] && data[i] >= data[i + 2];
    
    const isLow = type === 'low' &&
      data[i] <= data[i - 1] && data[i] <= data[i - 2] &&
      data[i] <= data[i + 1] && data[i] <= data[i + 2];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ—Ä–∞–∫—Ç–∞–ª—ã –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ä–æ–≤–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö
    if ((isHigh && (data[i] > data[i - 1] || data[i] > data[i + 1])) || 
        (isLow && (data[i] < data[i - 1] || data[i] < data[i + 1]))) {
      fractals.push({ index: i, value: data[i] });
    }
  }
  return fractals;
}

// average –∏ calculateIndicators –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function average(arr) {
  if (arr.length === 0) return 0;
  return arr.reduce((sum, val) => sum + val, 0) / arr.length;
}

export function calculateIndicators(candles) {
  const closes = candles.map(c => parseFloat(c[4]));
  const highs = candles.map(c => parseFloat(c[2]));
  const lows = candles.map(c => parseFloat(c[3]));

  if (closes.length < 30) {
    return { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö." };
  }

  const ma26 = average(closes.slice(-26));
  const allHighFractals = findFractals(highs, 'high');
  const allLowFractals = findFractals(lows, 'low');
  let resistance = null, support = null;

  if (allHighFractals.length >= 2) {
      resistance = getLineValue(allHighFractals.at(-2), allHighFractals.at(-1), candles.length - 1);
  }
  if (allLowFractals.length >= 2) {
      support = getLineValue(allLowFractals.at(-2), allLowFractals.at(-1), candles.length - 1);
  }

  return {
    ma26, support, resistance, allHighFractals, allLowFractals,
    lastCandle: { close: closes.at(-1) },
    prevCandle: { close: closes.at(-2) },
  };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å —Ä–µ–∂–∏–º–æ–º –æ—Ç–ª–∞–¥–∫–∏)
 */
export function checkSignals(indicators, lastSignal, candles, currentPrice) {
    const { ma26, support, resistance, allHighFractals, allLowFractals, prevCandle } = indicators;
    
    if (!prevCandle || !currentPrice || candles.length < 5) return null;

    let newSignal = null;

    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò ---
    const DEBUG_MODE = true; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ false, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏
    if (DEBUG_MODE) {
        const index = candles.length - 3; // –ò–Ω–¥–µ–∫—Å —Å–≤–µ—á–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ —Å—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º —Ñ—Ä–∞–∫—Ç–∞–ª–æ–º
        const highSlice = candles.slice(index - 2, index + 3).map(c => parseFloat(c[2]));
        const lowSlice = candles.slice(index - 2, index + 3).map(c => parseFloat(c[3]));
        console.log(`[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∫—Ç–∞–ª–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${index}. Highs: [${highSlice.join(', ')}]. Lows: [${lowSlice.join(', ')}]`);
    }

    // --- –ë–õ–û–ö 1: –°–∏–≥–Ω–∞–ª—ã –æ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–• —Ñ—Ä–∞–∫—Ç–∞–ª–∞—Ö ---
    const newlyConfirmedFractalIndex = candles.length - 3;
    
    const newHighFractal = allHighFractals.find(f => f.index === newlyConfirmedFractalIndex);
    if (newHighFractal) {
        newSignal = { type: 'info_high_confirmed', message: `‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª —Å–≤–µ—Ä—Ö—É (${newHighFractal.value.toFixed(4)}).` };
    }

    const newLowFractal = allLowFractals.find(f => f.index === newlyConfirmedFractalIndex);
    if (newLowFractal) {
        newSignal = { type: 'info_low_confirmed', message: `‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª —Å–Ω–∏–∑—É (${newLowFractal.value.toFixed(4)}).` };
    }
    
    // --- –ë–õ–û–ö 2: –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã ---
    if (!newSignal) {
        if (prevCandle.close < ma26 && currentPrice > ma26) {
            newSignal = { type: 'ma_buy', message: `üìà MA –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26.` };
        } else if (prevCandle.close > ma26 && currentPrice < ma26) {
            newSignal = { type: 'ma_sell', message: `üìâ MA –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26.` };
        } else if (resistance && prevCandle.close < resistance && currentPrice > resistance) {
            newSignal = { type: 'trend_buy', message: `üìà –¢—Ä–µ–Ω–¥ –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø—Ä–æ–±–∏–ª–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ.` };
        } else if (support && prevCandle.close > support && currentPrice < support) {
            newSignal = { type: 'trend_sell', message: `üìâ –¢—Ä–µ–Ω–¥ –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø—Ä–æ–±–∏–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É.` };
        }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (newSignal && (!lastSignal || newSignal.type !== lastSignal.type)) {
        return newSignal;
    }

    return null;
}
