// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function getLineValue(p1, p2, currentX) {
  if (!p1 || !p2 || p1.index === p2.index) return null;
  const slope = (p2.value - p1.value) / (p2.index - p1.index);
  return slope * (currentX - p1.index) + p1.value;
}

function findFractals(data, type) {
  const fractals = [];
  for (let i = 2; i < data.length - 2; i++) {
    const isHigh = type === 'high' && data[i] >= data[i-1] && data[i] >= data[i-2] && data[i] > data[i+1] && data[i] > data[i+2];
    const isLow = type === 'low' && data[i] <= data[i-1] && data[i] <= data[i-2] && data[i] < data[i+1] && data[i] < data[i+2];
    if (isHigh || isLow) {
      fractals.push({ index: i, value: data[i] });
    }
  }
  return fractals;
}

function average(arr) {
  if (arr.length === 0) return 0;
  return arr.reduce((sum, val) => sum + val, 0) / arr.length;
}

// –§—É–Ω–∫—Ü–∏—è calculateIndicators –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
export function calculateIndicators(candles) {
  const closes = candles.map(c => parseFloat(c[4]));
  const highs = candles.map(c => parseFloat(c[2]));
  const lows = candles.map(c => parseFloat(c[3]));

  if (closes.length < 30) {
    return { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö." };
  }

  const ma26 = average(closes.slice(-26));
  const allHighFractals = findFractals(highs, 'high');
  const allLowFractals = findFractals(lows, 'low');
  let resistance = null, support = null;

  if (allHighFractals.length >= 2) {
      resistance = getLineValue(allHighFractals.at(-2), allHighFractals.at(-1), candles.length - 1);
  }
  if (allLowFractals.length >= 2) {
      support = getLineValue(allLowFractals.at(-2), allLowFractals.at(-1), candles.length - 1);
  }

  return {
    ma26, support, resistance,
    lastCandle: { close: closes.at(-1) },
    prevCandle: { close: closes.at(-2) },
  };
}


/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å –Ω–æ–≤—ã–º –±–ª–æ–∫–æ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)
 */
export function checkSignals(indicators, lastSignal, candles, currentPrice) {
    const { ma26, support, resistance, prevCandle } = indicators;
    
    if (!prevCandle || !currentPrice || candles.length < 5) return null;

    let newSignal = null;
    const highs = candles.map(c => parseFloat(c[2]));
    const lows = candles.map(c => parseFloat(c[3]));

    // --- –ë–õ–û–ö 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï (–£–ü–†–ï–ñ–î–ê–Æ–©–ò–ï) –°–ò–ì–ù–ê–õ–´ –û –§–†–ê–ö–¢–ê–õ–ê–• ---
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∫—Ä—ã–ª–∞—Å—å 2 –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–∑–∞–¥ (i = length - 2)
    // –°–∏–≥–Ω–∞–ª –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ (length - 1)
    const provisionalFractalIndex = candles.length - 2;

    // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ—Ä–∞–∫—Ç–∞–ª–∞ —Å–≤–µ—Ä—Ö—É: –ø–∏–∫ –≤—ã—à–µ 2-—Ö —Å–≤–µ—á–µ–π —Å–ª–µ–≤–∞ –∏ 1-–π —Å–ø—Ä–∞–≤–∞
    const isProvHigh = highs[provisionalFractalIndex] >= highs[provisionalFractalIndex - 1] &&
                       highs[provisionalFractalIndex] >= highs[provisionalFractalIndex - 2] &&
                       highs[provisionalFractalIndex] > highs[provisionalFractalIndex + 1];

    if (isProvHigh) {
        const fractalValue = highs[provisionalFractalIndex];
        newSignal = { type: 'prov_high', message: `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª —Å–≤–µ—Ä—Ö—É (${fractalValue.toFixed(4)}).` };
    }

    // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ—Ä–∞–∫—Ç–∞–ª–∞ —Å–Ω–∏–∑—É
    const isProvLow = lows[provisionalFractalIndex] <= lows[provisionalFractalIndex - 1] &&
                      lows[provisionalFractalIndex] <= lows[provisionalFractalIndex - 2] &&
                      lows[provisionalFractalIndex] < lows[provisionalFractalIndex + 1];

    if (isProvLow) {
        const fractalValue = lows[provisionalFractalIndex];
        newSignal = { type: 'prov_low', message: `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª —Å–Ω–∏–∑—É (${fractalValue.toFixed(4)}).` };
    }
    
    // --- –ë–õ–û–ö 2: –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ "–í –ú–û–ú–ï–ù–¢–ï" ---
    // –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ —Ñ—Ä–∞–∫—Ç–∞–ª–µ
    if (!newSignal) {
        if (prevCandle.close < ma26 && currentPrice > ma26) {
            newSignal = { type: 'ma_buy', message: `üìà MA –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26.` };
        } else if (prevCandle.close > ma26 && currentPrice < ma26) {
            newSignal = { type: 'ma_sell', message: `üìâ MA –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26.` };
        } else if (resistance && prevCandle.close < resistance && currentPrice > resistance) {
            newSignal = { type: 'trend_buy', message: `üìà –¢—Ä–µ–Ω–¥ –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø—Ä–æ–±–∏–ª–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ.` };
        } else if (support && prevCandle.close > support && currentPrice < support) {
            newSignal = { type: 'trend_sell', message: `üìâ –¢—Ä–µ–Ω–¥ –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø—Ä–æ–±–∏–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É.` };
        }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (newSignal && (!lastSignal || newSignal.type !== lastSignal.type)) {
        return newSignal;
    }

    return null;
}
