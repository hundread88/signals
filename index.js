import dotenv from 'dotenv';
dotenv.config();

import { Telegraf } from 'telegraf';
import { getCandles } from './utils/binance.js';
import { calculateIndicators, checkSignals } from './utils/indicators.js';
import { getUser, saveUser, updateUserSignal } from './utils/db.js';

if (!process.env.BOT_TOKEN) {
    throw new Error('"BOT_TOKEN" env variable is required!');
}

const bot = new Telegraf(process.env.BOT_TOKEN);

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

bot.start(async (ctx) => {
    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª–æ–≤. –í—ã–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:', {
        reply_markup: { keyboard: [['BTCUSDT', 'ETHUSDT', 'SOLUSDT']], one_time_keyboard: true, resize_keyboard: true }
    });
});

bot.hears(['BTCUSDT', 'ETHUSDT', 'SOLUSDT'], async (ctx) => {
    const id = ctx.from.id;
    await saveUser(id, { symbol: ctx.message.text });
    await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:', {
        reply_markup: { keyboard: [['5m', '15m', '30m'], ['1h', '4h', '1d']], one_time_keyboard: true, resize_keyboard: true }
    });
});

bot.hears(['5m', '15m', '30m', '1h', '4h', '1d'], async (ctx) => {
    const id = ctx.from.id;
    await saveUser(id, { timeframe: ctx.message.text });
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.');
});

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ ---

const checkAllUsers = async () => {
    const users = await getUser();
    // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ users —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(users)) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, users –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.');
        return;
    }
    for (const user of users) {
        const { telegram_id, symbol, timeframe, last_signal } = user;
        if (!symbol || !timeframe) continue;

        try {
            const candles = await getCandles(symbol, timeframe, 200);
            if (candles.length < 30) continue;
            const indicators = calculateIndicators(candles);
            if (indicators.error) {
                console.error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è ${telegram_id}:`, indicators.error);
                continue;
            }
            const newSignal = checkSignals(indicators, last_signal, candles);
            if (newSignal) {
                await bot.telegram.sendMessage(telegram_id, `üì¢ –°–∏–≥–Ω–∞–ª (${symbol}, ${timeframe}):\n${newSignal.message}`);
                await updateUserSignal(telegram_id, newSignal);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', telegram_id, e.message);
        }
    }
};

setInterval(checkAllUsers, 5 * 60 * 1000);

// --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---

const startBot = async () => {
    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));

    if (process.env.WEBHOOK_URL) {
        // --- –†–ï–ñ–ò–ú WEBHOOK (–î–õ–Ø RENDER) ---
        const port = process.env.PORT || 8080;
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram
            await bot.telegram.setWebhook(`${process.env.WEBHOOK_URL}/telegraf/${bot.secretPathComponent()}`);
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await bot.startWebhook(`/telegraf/${bot.secretPathComponent()}`, null, port);
            console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook:', e);
        }
    } else {
        // --- –†–ï–ñ–ò–ú POLLING (–î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò) ---
        try {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ 409
            await bot.telegram.deleteWebhook({ drop_pending_updates: true });
            console.log('–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...');
            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞
            await bot.launch();
            console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling:', e);
        }
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
