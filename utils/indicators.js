/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ª–∏–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏.
 * –õ–∏–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ –¥–≤—É–º —Ç–æ—á–∫–∞–º p1(–∏–Ω–¥–µ–∫—Å, –∑–Ω–∞—á–µ–Ω–∏–µ) –∏ p2(–∏–Ω–¥–µ–∫—Å, –∑–Ω–∞—á–µ–Ω–∏–µ).
 */
function getLineValue(p1, p2, currentX) {
  if (!p1 || !p2 || p1.index === p2.index) return null;
  const slope = (p2.value - p1.value) / (p2.index - p1.index);
  // –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ–π: y = m * (x - x1) + y1
  return slope * (currentX - p1.index) + p1.value;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Ñ—Ä–∞–∫—Ç–∞–ª—ã (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã).
 */
function findFractals(data, type) {
  const fractals = [];
  // –î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∞–∫—Ç–∞–ª–∞ –Ω—É–∂–Ω–æ 2 —Å–≤–µ—á–∏ —Å–ª–µ–≤–∞ –∏ 2 —Å–ø—Ä–∞–≤–∞
  for (let i = 2; i < data.length - 2; i++) {
    const isHigh = type === 'high' &&
      data[i] > data[i - 1] && data[i] > data[i - 2] &&
      data[i] > data[i + 1] && data[i] > data[i + 2];

    const isLow = type === 'low' &&
      data[i] < data[i - 1] && data[i] < data[i - 2] &&
      data[i] < data[i + 1] && data[i] < data[i + 2];

    if (isHigh || isLow) {
      fractals.push({ index: i, value: data[i] });
    }
  }
  return fractals;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (SMA).
 */
function average(arr) {
  if (arr.length === 0) return 0;
  return arr.reduce((sum, val) => sum + val, 0) / arr.length;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
 */
export function calculateIndicators(candles) {
  const closes = candles.map(c => parseFloat(c[4]));
  const highs = candles.map(c => parseFloat(c[2]));
  const lows = candles.map(c => parseFloat(c[3]));

  if (closes.length < 30) {
    return { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞." };
  }

  // –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
  const ma7 = average(closes.slice(-7));
  const ma26 = average(closes.slice(-26));
  const trend = ma7 > ma26 ? 'up' : ma7 < ma26 ? 'down' : 'sideways';

  // –§—Ä–∞–∫—Ç–∞–ª—ã
  const frHighs = findFractals(highs, 'high');
  const frLows = findFractals(lows, 'low');
  
  const lastCandleIndex = candles.length - 1;

  // –†–∞—Å—á–µ—Ç –ª–∏–Ω–∏–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø–æ –¥–≤—É–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ñ—Ä–∞–∫—Ç–∞–ª–∞–º high
  let resistance = null;
  if (frHighs.length >= 2) {
    resistance = getLineValue(frHighs.at(-2), frHighs.at(-1), lastCandleIndex);
  }

  // –†–∞—Å—á–µ—Ç –ª–∏–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –¥–≤—É–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ñ—Ä–∞–∫—Ç–∞–ª–∞–º low
  let support = null;
  if (frLows.length >= 2) {
    support = getLineValue(frLows.at(-2), frLows.at(-1), lastCandleIndex);
  }

  return {
    ma26,
    trend,
    support,
    resistance,
    lastCandle: { close: parseFloat(candles.at(-1)[4]) },
    prevCandle: { close: parseFloat(candles.at(-2)[4]) },
    message: `MA7: ${ma7.toFixed(2)}, MA26: ${ma26.toFixed(2)}, Trend: ${trend}`
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
 */
export function checkSignals(indicators, lastSignal) {
    const { ma26, support, resistance, lastCandle, prevCandle } = indicators;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    if (!lastCandle || !prevCandle) return null;

    const newSignal = { type: 'none', message: '' };

    // --- –°–∏–≥–Ω–∞–ª—ã –ø–æ MA26 ---
    if (prevCandle.close < ma26 && lastCandle.close > ma26) {
        newSignal.type = 'ma_buy';
        newSignal.message = `üìà –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (MA)\n–¶–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26 —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${lastCandle.close.toFixed(4)}`;
    } else if (prevCandle.close > ma26 && lastCandle.close < ma26) {
        newSignal.type = 'ma_sell';
        newSignal.message = `üìâ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (MA)\n–¶–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26 —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${lastCandle.close.toFixed(4)}`;
    }

    // --- –°–∏–≥–Ω–∞–ª—ã –ø–æ –ª–∏–Ω–∏—è–º —Ç—Ä–µ–Ω–¥–∞ ---
    // –ü—Ä–æ–±–æ–π –ª–∏–Ω–∏–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (—Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É)
    else if (resistance && prevCandle.close < resistance && lastCandle.close > resistance) {
        newSignal.type = 'trend_buy';
        newSignal.message = `üìà –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (–¢—Ä–µ–Ω–¥)\n–¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ª–∏–Ω–∏—é —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${lastCandle.close.toFixed(4)}`;
    }
    // –ü—Ä–æ–±–æ–π –ª–∏–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É)
    else if (support && prevCandle.close > support && lastCandle.close < support) {
        newSignal.type = 'trend_sell';
        newSignal.message = `üìâ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–¢—Ä–µ–Ω–¥)\n–¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –ª–∏–Ω–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${lastCandle.close.toFixed(4)}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    if (newSignal.type !== 'none' && (!lastSignal || newSignal.type !== lastSignal.type)) {
        return newSignal;
    }

    return null; // –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç
}
