// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ calculateIndicators –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

function getLineValue(p1, p2, currentX) {
  if (!p1 || !p2 || p1.index === p2.index) return null;
  const slope = (p2.value - p1.value) / (p2.index - p1.index);
  return slope * (currentX - p1.index) + p1.value;
}
function findFractals(data, type) {
  const fractals = [];
  for (let i = 2; i < data.length - 2; i++) {
    const isHigh = type === 'high' && data[i]>=data[i-1] && data[i]>=data[i-2] && data[i]>=data[i+1] && data[i]>=data[i+2];
    const isLow = type === 'low' && data[i]<=data[i-1] && data[i]<=data[i-2] && data[i]<=data[i+1] && data[i]<=data[i+2];
    if ((isHigh && (data[i]>data[i-1] || data[i]>data[i+1])) || (isLow && (data[i]<data[i-1] || data[i]<data[i+1]))) {
      fractals.push({ index: i, value: data[i] });
    }
  }
  return fractals;
}
function average(arr) {
  if (arr.length === 0) return 0;
  return arr.reduce((sum, val) => sum + val, 0) / arr.length;
}
export function calculateIndicators(candles) {
  const closes = candles.map(c => parseFloat(c[4]));
  if (closes.length < 30) { return { indicators: { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö." } }; }
  const highs = candles.map(c => parseFloat(c[2]));
  const lows = candles.map(c => parseFloat(c[3]));
  const ma26 = average(closes.slice(-26));
  const allHighFractals = findFractals(highs, 'high');
  const allLowFractals = findFractals(lows, 'low');
  let support = null, resistance = null;
  
  // –í–ê–ñ–ù–û: –ú—ã –≤—ã—á–∏—Å–ª—è–µ–º –ª–∏–Ω–∏—é –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ú–û–ú–ï–ù–¢–ê –í–†–ï–ú–ï–ù–ò, –¥–ª—è `currentPrice`
  // –ü–æ—ç—Ç–æ–º—É –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ü–∏–∏ –±—É–¥–µ—Ç `candles.length`, –∞ –Ω–µ `length - 1`
  const currentCandleIndex = candles.length;

  if (allHighFractals.length >= 2) {
    resistance = getLineValue(allHighFractals.at(-2), allHighFractals.at(-1), currentCandleIndex);
  }
  if (allLowFractals.length >= 2) {
    support = getLineValue(allLowFractals.at(-2), allLowFractals.at(-1), currentCandleIndex);
  }
  const indicators = {
    ma26, support, resistance, allHighFractals, allLowFractals,
    lastCandle: { close: closes.at(-1) },
    prevCandle: { close: closes.at(-2) },
  };
  return { indicators };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
 */
export function checkSignals(indicators, signal_cache, candles, currentPrice) {
    const { ma26, allHighFractals, allLowFractals, prevCandle } = indicators;
    if (!prevCandle || !currentPrice || candles.length < 5) {
        return { newSignals: [], updatedCache: signal_cache };
    }

    const lastCandleOpenTime = candles.at(-1)[0]; 
    let currentCache = signal_cache || { period_timestamp: 0, sent_types: [] };
    if (currentCache.period_timestamp !== lastCandleOpenTime) {
        currentCache = { period_timestamp: lastCandleOpenTime, sent_types: [] };
    }

    const potentialSignals = [];
    const newlyConfirmedFractalIndex = candles.length - 3;

    // --- –ë–õ–û–ö 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ —Ñ—Ä–∞–∫—Ç–∞–ª–∞—Ö (–ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ–≥–¥–∞) ---
    const newHighFractal = allHighFractals.find(f => f.index === newlyConfirmedFractalIndex);
    if (newHighFractal) {
        const prevHighFractal = allHighFractals.filter(f => f.index < newHighFractal.index).at(-1);
        if (!prevHighFractal || newHighFractal.value > prevHighFractal.value) {
            potentialSignals.push({ type: 'info_peak_high', message: `üìà –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–∏–∫–æ–≤—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª —Å–≤–µ—Ä—Ö—É (${newHighFractal.value.toFixed(4)}).` });
        } else {
            potentialSignals.push({ type: 'info_line_high', message: `üî¥ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª —Å–≤–µ—Ä—Ö—É, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–∞—è (${newHighFractal.value.toFixed(4)}).` });
        }
    }
    const newLowFractal = allLowFractals.find(f => f.index === newlyConfirmedFractalIndex);
    if (newLowFractal) {
        const prevLowFractal = allLowFractals.filter(f => f.index < newLowFractal.index).at(-1);
        if (!prevLowFractal || newLowFractal.value < prevLowFractal.value) {
            potentialSignals.push({ type: 'info_peak_low', message: `üìâ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–∏–∫–æ–≤—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª —Å–Ω–∏–∑—É (${newLowFractal.value.toFixed(4)}).` });
        } else {
            potentialSignals.push({ type: 'info_line_low', message: `üü¢ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª —Å–Ω–∏–∑—É, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–∞—è (${newLowFractal.value.toFixed(4)}).` });
        }
    }

    // --- –ë–õ–û–ö 2: –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ MA26 (–ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ–≥–¥–∞) ---
    if (prevCandle.close < ma26 && currentPrice > ma26) {
        potentialSignals.push({ type: 'ma_buy', message: `üìà MA –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26.` });
    } else if (prevCandle.close > ma26 && currentPrice < ma26) {
        potentialSignals.push({ type: 'ma_sell', message: `üìâ MA –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ MA26.` });
    }
    
    // --- –ë–õ–û–ö 3: –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –Ω–∞–∫–ª–æ–Ω–Ω—ã–º (–ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ–≥–¥–∞) ---
    // –î–ª—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    if (allHighFractals.length >= 2) {
        const lastHigh = allHighFractals.at(-1);
        const prevHigh = allHighFractals.at(-2);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–Ω–∏—è –±—ã–ª–∞ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π
        if (prevHigh.value > lastHigh.value) {
            const resistanceLineValue = getLineValue(prevHigh, lastHigh, candles.length); // –ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
            const prevResistanceLineValue = getLineValue(prevHigh, lastHigh, candles.length - 1); // –ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ—à–ª—É—é —Å–≤–µ—á—É
            if (prevCandle.close < prevResistanceLineValue && currentPrice > resistanceLineValue) {
                potentialSignals.push({ type: 'trend_buy', message: `üìà –¢—Ä–µ–Ω–¥ –ü–æ–∫—É–ø–∫–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø—Ä–æ–±–∏–ª–∞ –Ω–∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ.` });
            }
        }
    }
    
    // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (allLowFractals.length >= 2) {
        const lastLow = allLowFractals.at(-1);
        const prevLow = allLowFractals.at(-2);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–Ω–∏—è –±—ã–ª–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–π
        if (prevLow.value < lastLow.value) {
            const supportLineValue = getLineValue(prevLow, lastLow, candles.length);
            const prevSupportLineValue = getLineValue(prevLow, lastLow, candles.length - 1);
            if (prevCandle.close > prevSupportLineValue && currentPrice < supportLineValue) {
                potentialSignals.push({ type: 'trend_sell', message: `üìâ –¢—Ä–µ–Ω–¥ –ü—Ä–æ–¥–∞–∂–∞: –¶–µ–Ω–∞ (${currentPrice.toFixed(4)}) –ø—Ä–æ–±–∏–ª–∞ –≤–æ—Å—Ö–æ–¥—è—â—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.` });
            }
        }
    }

    // --- –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
    const newSignalsToSend = [];
    for (const signal of potentialSignals) {
        if (!currentCache.sent_types.includes(signal.type)) {
            newSignalsToSend.push(signal);
            currentCache.sent_types.push(signal.type);
        }
    }
    
    return { newSignals: newSignalsToSend, updatedCache: currentCache };
}
